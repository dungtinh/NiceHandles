
@model NiceHandles.Models.xTemp
@using NiceHandles.Models
@using Microsoft.AspNet.Identity;
@{
    //var temp = new xTemp() { int1 = item.category_id, int2 = Model.id, long1 = item.amount, str1 = item.name, int3 = item.id };
    var db = new NHModel();
    long amount = 0;
    bool flag = false;
    var dachis = db.InOuts.Where(x => x.category_id == Model.int1 && x.contract_id == Model.int2 && x.status < (int)XInOut.eStatus.Huy).ToArray();
    if (dachis.Count() > 0)
    {
        amount = dachis.Sum(x => x.amount);
        flag = true;
    }
    else
    {
        amount = Model.long1;
    }
    var accounts = db.Accounts.Where(x => x.sta == (int)XAccount.eStatus.Processing);
    var username = User.Identity.GetUserName();
    var us = db.Accounts.Where(x => x.UserName.Equals(username)).Single();
    int account_id = us.id;

    var contract = db.Contracts.Find(Model.int2);
    var cate = db.Categories.Find(Model.int1);

    var partner = db.Partners.Find(contract.partner);
    switch (cate.kind)
    {
        case (int)XCategory.eKind.Partner:
            account_id = partner.account_id;
            break;
        case (int)XCategory.eKind.Rose:
            account_id = partner.account_id;
            break;
        case (int)XCategory.eKind.Dove:
            account_id = 14; // Chi chỉ định anh Kiên
            break;
        case (int)XCategory.eKind.Remunerate:
            var hoso = db.HoSoes.Where(x => x.contract_id == contract.id && x.service_id == contract.service_id).FirstOrDefault();
            if (hoso != null)
            {
                account_id = hoso.account_id;
            }
            break;
        default:
            account_id = us.id;
            break;
    }

    var step1cua = db.Steps.Single(x => x.code.Equals("NOP1CUA"));
    var lstStep = db.Steps.Where(x => x.sort >= step1cua.sort).Select(x => x.id).ToArray();
    var cateRemunerate = db.Categories.Single(x => x.kind == (int)XCategory.eKind.Remunerate);
    if (Model.int1 == cateRemunerate.id)
    {
        flag = true;
        var hoso = db.HoSoes.FirstOrDefault(x => x.contract_id == Model.int2 && x.service_id == contract.service_id);
        var servicesNotRemunerate = db.Services.Where(x => x.code.Equals("chuyennhuong") || x.code.Equals("dove") || x.code.Equals("dinhchinh")).Select(x => x.id);
        if (hoso != null)
        {
            if (!servicesNotRemunerate.Contains(contract.service_id))
            {
                if (lstStep.Contains(hoso.step_id))
                {
                    flag = false;
                }
            }
        }
    }

}
@using (Html.BeginForm("TrinhDuyetChi", "InOuts", FormMethod.Post, new { role = "form", enctype = "multipart/form-data" }))
{
    <tr>
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.int1)
        @Html.HiddenFor(model => model.int2)
        @Html.HiddenFor(model => model.int3)
        <td style="line-height: 30px;">
            @Html.DropDownList("acc" + Model.int1, new SelectList(accounts, "id", "fullname", account_id), new { @class = "form-control" })
            @Html.HiddenFor(model => model.int4, new { @id = "hdfAcc" + Model.int1 })
        </td>
        <td style="text-align: right; line-height: 30px;">
            @Model.str1:
        </td>
        <td>
            <input type="text" value="@amount" class="form-control numberic" id="@("amount" +Model.int1)" />
            @Html.HiddenFor(model => model.long1, new { @id = "hdf" + Model.int1 })
        </td>
        <td>
            <input type="submit" class="btn btn-warning" id="sub@(Model.int1)" value="Trình duyệt" @(flag ? "disabled" : "") />
        </td>
        @if (dachis.Count() > 0)
        {
            var io = dachis.OrderBy(x => x.status).First();
            var nhatky = db.DuChiNhatKies.SingleOrDefault(x => x.inout_id == io.id);
            <td>
                <label>@XInOut.sStatus[io.status]</label>
            </td>
            <td>
                @if (nhatky != null && nhatky.status < (int)XDuChiNhatKy.eStatus.DaDi)
                {
                    <button class="btn btn-info" type="button" onclick="DiThucHien(@io.id, @(nhatky.status + 1), null);"> @XDuChiNhatKy.sStatus[nhatky.status]</button>
                }
                else if (nhatky != null)
                {
                    @XDuChiNhatKy.sStatus[nhatky.status]
                }
            </td>
            <td>
                <input type="text" value="@(nhatky != null ?  nhatky.note :"")" class="form-control" onchange="DiThucHien(@io.id, null, this.value);" />
            </td>
            <td>
                <button class="btn btn-danger" type="button" onclick="TraLaiDuChi(@io.id);">@XDuChiNhatKy.sStatus[(int)XDuChiNhatKy.eStatus.TraLai]</button>
            </td>
        }
        else
        {
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        }
    </tr>
}