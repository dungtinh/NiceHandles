@model NiceHandles.Models.HoSo
@using NiceHandles.Models
@{
    var db = new NHModel();
    ViewBag.Title = "Index";
    var tls = XFile.sTypeLevel.GroupBy(p => p.Value, (key, g) => new { value = key, LST = g.ToList() }).ToList();
    var fs = db.Files.Where(x => x.hoso_id == Model.id);
    string HSTiepNhan = string.Empty;
    Dictionary<int, string> files = new Dictionary<int, string>();
    foreach (var per in XFile.sType)
    {
        string temp = string.Empty;
        foreach (var item in fs.Where(x => x.type == per.Key))
        {
            temp += "<a href='" + item.url + "' target='_blank' >" + item.name + "</a><span id='" + item.id + "' class='del'>x</span> | ";
        }
        files.Add(per.Key, temp);
    }
    var ONEDOORFILES = db.OneDoorFiles.Where(x => x.hoso_id == Model.id).ToArray();
    var odfden = ONEDOORFILES.Where(x => x.type == (int)Xdi1cua.eFileType.TBVPDK);
    var odfdi = ONEDOORFILES.Where(x => x.type == (int)Xdi1cua.eFileType.DDN);

    var contract = db.Contracts.Find(Model.contract_id);
    var service = db.Services.Find(contract.service_id);
    var address = db.Addresses.Find(contract.address_id);

    var lstCVIDS = db.fk_congviec_service.Where(x => x.service_id == service.id).Select(x => x.congviec_id);
    var lstCVs = lstCVIDS != null ? db.CongViecs.Where(x => lstCVIDS.Contains(x.id)) : null;
    var done = db.fk_congviec_contract.Where(x => x.contract_id == contract.id && x.status == (int)XModels.eStatus.Complete).Select(x => x.congviec_id);
    var processing = db.wf_contract.Where(x => x.contract_id == contract.id);
}
<h2>
    @Html.Raw(Model.name)
    <a href='/Infomations/Edit?hoso_id=@Model.id' style="font-size:14px; font-style: italic;" class="text-danger">
        <i style="font-size: large" class="fa fa-regular fa-keyboard"></i>
        Nhập thông tin
    </a>
</h2>
<input type="hidden" value="@Model.id" id="txtId" />
<div>
    <div class="row">
        <div class="col-md-6">
            <dl class="dl-horizontal">
                <dt>
                    Dịch vụ
                </dt>
                <dd>
                    @service.name
                </dd>
                <dt>
                    Địa chỉ
                </dt>
                <dd>
                    @Html.Raw(address.name)
                </dd>
                <dt>
                    Điện thoại
                </dt>
                <dd>
                    @contract.sodienthoai
                </dd>
            </dl>
        </div>
        <div class="col-md-6" style="text-align: right;">
            <p>
                <label>Bước hiện tại: <span class="text-danger"> @XHoSo.sStep[Model.step_id]</span></label>
                @if (Model.step_id < (int)XHoSo.eStep.DaHoanTat)
                {
                    <label> | Bước tiếp là: <span class="text-danger"> @XHoSo.sStep[Model.step_id + 1]</span></label>
                }
            </p>
            @Html.ActionLink("Trả về", "Prev", "Contracts", new { id = Model.id }, new { @class = "btn btn-danger" })
            @Html.ActionLink("Bước tiếp", "Next", "Contracts", new { id = Model.id }, new { @class = "btn btn-info" })
        </div>
    </div>
    <div class="row">
        <div class="col-md-7">
            <div style="border: 1px solid; border-radius: 10px; padding: 10px 0; margin: 0 0 10px 0;" class="row text-info">
                <form id="frmDCTD">
                    <div class="text-info col-sm-3" style="text-align: right;">
                        Địa chỉ thửa đất
                    </div>
                    <div class="col-sm-9">
                        <input style="display: inline-block;" class="form-control" value="@(Model.link_gmap)" />
                    </div>
                    <p style="clear: both;"></p>
                    <div class="text-info col-sm-3" style="text-align: right;">
                        Link file CAD
                    </div>
                    <div class="col-sm-9">
                        <input value="@(Model.link_filecad)" style="display: inline-block; width: 70%;" class="form-control" id="txtCAD" readonly="readonly" />
                        <input type="file" style="display: inline-block; width: 210px; float: right;" class="btn btn-info" />
                    </div>
                    <p style="clear: both;"></p>
                    <div class="text-info col-sm-3">
                        &nbsp;
                    </div>
                    <div class="col-sm-9">
                        <input type="submit" value="Cập nhật" class="btn btn-info" />
                    </div>
                </form>
                <p style="clear: both;"></p>
                <div class="text-info col-sm-3" style="text-align: right;">
                    Ảnh chụp
                </div>
                <div class="col-sm-9">
                    <form class="frmUpload" id="10">
                        <input type="file" style="display: inline-block;" class="btn btn-info" />
                        <input type="submit" value="Upload" class="btn btn-info" />
                    </form>
                </div>
                <div class="col-sm-12" style="padding-left: 27%;">
                    <p class="10"> @Html.Raw(files[10])</p>
                </div>
            </div>

            @foreach (var ptl in tls.Where(x => !x.value.Equals("Khác")))
            {
                var disable = ptl.value.Equals("Phiếu VPĐK");
                <div style="border: 1px solid; border-radius: 10px; padding: 10px 0; margin: 10px 0;" class="row text-@XModels.Colors[tls.IndexOf(ptl) ]">
                    @foreach (var pk in ptl.LST)
                    {
                        <div class="text-@XModels.Colors[tls.IndexOf(ptl)] col-sm-3" style="text-align: right;">
                            @XFile.sType[pk.Key]
                        </div>
                        <div class="col-sm-9">
                            <form class="frmUpload" id="@pk.Key" style="@Html.Raw(disable?"display:none;": null )">
                                <input type="file" style="display: inline-block;" class="btn btn-@XModels.Colors[tls.IndexOf(ptl) ]" />
                                <input type="submit" value="Upload" class="btn btn-@XModels.Colors[tls.IndexOf(ptl) ]" />
                            </form>
                        </div>
                        <div class="col-sm-12" style="padding-left: 27%;">
                            <p class="@pk.Key"> @Html.Raw(files[pk.Key])</p>
                        </div>
                    }
                </div>
            }
            @if (odfden.Count() > 0)
            {
                <div style="border: 1px solid; border-radius: 10px; padding: 10px 0; margin: 10px 0;" class="row text-warning">
                    <h5 class="text-center">VĂN BẢN ĐẾN</h5>
                    <ul>
                        @foreach (var odf in odfden)
                        {
                            <li class="text-warning"><a href="@odf.url" target="_blank">@odf.name</a></li>
                        }
                    </ul>
                </div>
            }
            @if (odfdi.Count() > 0)
            {
                <div style="border: 1px solid; border-radius: 10px; padding: 10px 0; margin: 10px 0;" class="row text-danger">
                    <h5 class="text-center">VĂN BẢN ĐI</h5>
                    <ul>
                        @foreach (var odf in odfdi)
                        {
                            <li class="text-danger"><a href="@odf.url" target="_blank">@odf.name</a></li>
                        }
                    </ul>
                </div>
            }
            <div style="border: 1px solid; border-radius: 10px; padding: 10px 0; margin: 10px 0;" class="row text-danger">
                <h5 class="text-center">TIẾN ĐỘ</h5>
                <ul id="ulProcessing">
                    @foreach (var item in processing)
                    {
                        var us = db.Accounts.Find(item.account_id);
                        <li><span>@item.time.ToString("dd/MM/yy")</span> | <span>@us.fullname</span> | @item.note</li>
                    }
                </ul>
                <div class="row" style="margin-left: 10px;">
                    <div class="col-sm-9">
                        <div class="form-group">
                            <input type="text" class="form-control" id="txtProcessing" />
                        </div>
                    </div>
                    <div class="col-sm-2">
                        <div class="form-group">
                            <input type="button" value="Cập nhật" onclick="UpdateProcessing(@contract.id)" class="btn btn-danger" />
                        </div>
                    </div>
                </div>
            </div>
            @if (Model.step_id == (int)XHoSo.eStep.Nop1Cua)
            {
                var onedoor = db.di1cua.Where(x => x.hoso_id == Model.id).OrderByDescending(x => x.ngaynop).First();
                <div style="border: 1px solid; border-radius: 10px; padding: 10px 0; margin: 10px 0;" class="row text-success">
                    <h5 class="text-center">THÔNG TIN NỘP 1 CỬA</h5>
                    <div class="row form-horizontal" style="padding-right: 20px;">
                        <div class="col-md-12">
                            <div class="form-group">
                                @Html.Label("Ngày nộp", new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.TextBox("1cngaynop", Html.Raw(onedoor.ngaynop.ToString("dd/MM/yyyy")), new { @class = "form-control datetime" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.Label("Ngày trả KQ", new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.TextBox("1cngaytra", Html.Raw(onedoor.ngaytra.ToString("dd/MM/yyyy")), new { @class = "form-control datetime" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.Label("Nơi tiếp nhận", new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownList("1cnoinhan", new SelectList(db.CoQuanGiaiQuyets, "id", "name", onedoor.noinhan_id), new { @class = "form-control" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.Label("Mã phiếu hẹn", new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.TextBox("1cmaphieuhen", onedoor.maphieuhen, new { @class = "form-control" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.Label("Trạng thái", new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownList("1ctrangthai", new SelectList(Xdi1cua.sStatus, "Key", "Value", onedoor.trangthai), new { @class = "form-control" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.Label("Ghi chú", new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.TextArea("1cghichu", onedoor.ghichu, new { @class = "form-control" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
            <p>
                <button type="button" onclick="SaveNote();" class="btn btn-primary">Lưu lại</button>
            </p>
            @Html.TextArea("txtMessage", Model.note, new { @class = "form-control summernote", @style = "resize: vertical;", @rows = 50 })
        </div>
        <div class="col-md-5">
            <div style="background-color: aliceblue; border-radius: 10px; padding: 3px 10px; margin-bottom: 10px;">
                <h4><i class="fas fa-clipboard-list-check"></i> Công việc phải làm <button class="btn btn-danger" onclick="InCongViec(@contract.id,@service.id);">Bản in</button> </h4>
                <ul>
                    @foreach (var cate in XCongViec.sCategory)
                    {
                        <li style="list-style: none;">
                            <h5 style="text-transform: uppercase;" class="text-danger">@Html.Raw(XCongViec.sCategoryIcon[cate.Key]) @cate.Value </h5>
                            <ul>
                                @foreach (var cv in lstCVs.Where(x => x.category_id == cate.Key))
                                {
                                    <li style="list-style: none;">
                                        <input onclick="CVChange(this,@cv.id);" style="height: 20px; width: 20px;" type="checkbox" value="@cv.id" @Html.Raw(done.Contains(cv.id) ? "checked" : null) />
                                        <span style="vertical-align: super;">@cv.name</span>
                                    </li>
                                }
                            </ul>
                        </li>
                    }
                </ul>
            </div>
            <div style="background-color: lavender; border-radius: 10px; padding: 3px 10px; margin-bottom: 10px;">
                <h4>Hướng dẫn làm dịch vụ @(service.name)</h4>
                @Html.Raw(service.trainning)
            </div>
            <div style="background-color: lavenderblush; border-radius: 10px; padding: 3px 10px; margin-bottom: 10px;">
                <h4>Hướng dẫn thực hiện bước @(XHoSo.sStep[Model.step_id])</h4>

            </div>
            <div style="background-color: antiquewhite; border-radius: 10px; padding: 3px 10px;">
                @Html.Raw(contract.note)
            </div>
        </div>
        <hr />
    </div>
</div>

<p>
    @Html.ActionLink("Về trang chủ", "BanLamViec", "Contracts")
</p>
@section Style {
}

<div id="password" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" style="float: left;">Nhập mật khẩu xóa</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Để chắc chắn rằng mình muốn xóa, vui lòng nhập mật khẩu</p>
                <input type="password" class="form-control" id="txtPassword" />
                <i id="lblWrongPass" class="text-danger hide">Sai mật khẩu</i>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="confirmed()">Chấp nhận</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<iframe id="my_iframe" style="display:none;"></iframe>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            $(".datetime").datepicker({
                "autoclose": true,
                "todayHighlight": true,
                "dateFormat": "dd/mm/yyyy",
                "format": "dd/mm/yyyy",
            });
            $('.summernote').summernote({
                height: 500,
                fontSizes: ['8', '9', '10', '11', '12', '14', '18'],
                fontNames: ['Arial', 'Tahoma'],
                toolbar: [
                    ['style', ['bold', 'italic', 'underline']],
                    ['fontsize', ['fontsize']],
                    ['font', ['strikethrough']],
                    ['para', ['ol', 'paragraph']],
                    ['color', ['color']],
                ]
            });
            $(".del").click(function () {
                currentDelCtr = this;
                $("#password").modal("show");
                return false;
            });
            //$('#password').on('hidden.bs.modal', function () {
            //    currentDelCtr.click();
            //});
            $('.frmUpload').on("submit", function (event) {
                var frm = this;
                var t = $(this).attr("id");
                var formdata = new FormData(); //FormData object
                var fileInput = $(':file', this)[0];
                for (i = 0; i < fileInput.files.length; i++) {
                    formdata.append(fileInput.files[i].name, fileInput.files[i]);
                }
                formdata.append("id", $("#txtId").val());
                formdata.append("t", t);
                var xhr = new XMLHttpRequest();
                xhr.open('POST', '/NhiemVus/Upload');
                xhr.send(formdata);
                xhr.onreadystatechange = function () {
                    if (xhr.readyState == 4 && xhr.status == 200) {
                        $("p." + t).append(xhr.responseText);
                    }
                }
                event.preventDefault();
            });
            $('#frmDCTD').on("submit", function (event) {
                var formdata = new FormData(); //FormData object
                var fileInput = $('#frmDCTD :file')[0];
                for (i = 0; i < fileInput.files.length; i++) {
                    formdata.append(fileInput.files[i].name, fileInput.files[i]);
                }
                var gmap = $('#frmDCTD :text').val();
                formdata.append("id", $("#txtId").val());
                formdata.append("g", gmap);
                var xhr = new XMLHttpRequest();
                xhr.open('POST', '/Contracts/EditDOVE');
                xhr.send(formdata);
                xhr.onreadystatechange = function () {
                    if (xhr.readyState == 4 && xhr.status == 200) {
                        //$("p." + t).append(xhr.responseText);
                        $('#frmDCTD :file').val(null);
                        $('#frmDCTD #txtCAD').val(xhr.responseText);
                    }
                }
                event.preventDefault();
            });

        });
        var currentDelCtr = null;
        function confirmed() {
            var pass = $("#txtPassword").val();
            if (pass == "@Html.Raw(NiceHandles.Models.XModels.Password)") {
                var id = currentDelCtr.id;
                $.ajax({
                    url: '/NhiemVus/DelFile',
                    type: "POST",
                    dataType: "JSON",
                    data: { id: id },
                    success: function () {
                        $(currentDelCtr).prev().remove();
                        $(currentDelCtr).remove();
                    }
                });
                $("#password").modal("hide");
            }
            else { $("#lblWrongPass").removeClass("hide"); }
        }
        function SaveNote() {
            var obj = new Object();
            obj.contract_id = @Model.contract_id;
            obj.step_id = @Model.step_id;
            //obj.ghichu = $('#txtGhiChu').summernote('code');
            var message = $('#txtMessage').summernote('code');
            $.ajax({
                url: '/NhiemVus/SaveNote',
                type: "POST",
                dataType: "JSON",
                data: { obj: obj, message: message },
                success: function () {
                    toastr.options = {
                        "preventDuplicates": true,
                        "preventOpenDuplicates": true
                    };
                    toastr.success("Đã lưu", "THÀNH CÔNG", { timeOut: 5000 });
                }
            });
            if (typeof window["Save1Cua"] === 'function') {
                window["Save1Cua"]();
            }
            if (obj.step_id == 4) {

                var cont = new Object();
                cont.id = obj.contract_id;
                cont.GoogleLink = $("#txtLinkCad").val();
                cont.QRAddress = $("#txtDiaChi").val();

                $.ajax({
                    url: '/NhiemVus/SaveDVUQ',
                    type: "POST",
                    dataType: "JSON",
                    data: cont,
                    success: function () {
                    }
                });

            }
        }
        
        function UpdateProcessing() {
            var txt = $("#txtProcessing").val();
            var contract_id = @Model.contract_id;
            $.ajax({
                url: '/NhiemVus/UpdateProcessing',
                type: "POST",
                dataType: "JSON",
                data: { contract_id: contract_id, txt : txt},
                success: function (data) {
                    $("#ulProcessing").html(data);
                    $("#txtProcessing").val("");
                }
            });
        }
        function InCongViec(cid, sid) {
            $.ajax({
                url: '/NhiemVus/InCongViec',
                data: {
                    cid: cid,
                    sid: sid
                },
                type: "GET",
                dataType: "JSON",
                success: function (url) {
                    document.getElementById('my_iframe').src = url;
                }
            });
        }
        function Save1Cua() {
            var obj = new Object();
            obj.id = $("[name=1cid]").val();
            obj.contract_id = $("[name=1ccontract_id]").val();
            obj.ngaynop = $("[name=1cngaynop]").val();
            obj.ngaytra = $("[name=1cngaytra]").val();
            obj.noinhan_id = $("[name=1cnoinhan]").val();
            obj.maphieuhen = $("[name=1cmaphieuhen]").val();
            obj.trangthai = $("[name=1ctrangthai]").val();
            obj.ghichu = $("[name=1cghichu]").val();
            $.ajax({
                url: '/di1cua/Save',
                type: "POST",
                dataType: "JSON",
                data: { di1cua: obj, ngaynop: obj.ngaynop, ngaytra: obj.ngaytra },
                success: function () {
                    toastr.options = {
                        "preventDuplicates": true,
                        "preventOpenDuplicates": true
                    };
                    toastr.success("Đã lưu đi 1 cửa", "THÀNH CÔNG", { timeOut: 5000 });
                }
            });
        }
    </script>
}
