@model NiceHandles.Models.XInOut

@{
    ViewBag.Title = "Thêm mới";
}

<h2>Thêm mới</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Thu chi</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.obj.created_by, new { @Value = "0" })
        @if (ViewBag.contract_id != null)
        {
            @Html.HiddenFor(x => x.obj.contract_id, new { @Value = ViewBag.contract_id })
        }
        <div class="form-group">
            @Html.Label("Thời gian", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.obj.time, new { htmlAttributes = new { @class = "form-control datetime", autocomplete = "off" } })
                @Html.ValidationMessageFor(model => model.obj.time, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Tài khoản", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.obj.account_id, Model.account, "Người thực hiện", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.obj.account_id, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Loại", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.obj.type, Model.types, "Chọn thu hoặc chi", new { @class = "form-control", @onchange = "FillCategory()" })
                @Html.ValidationMessageFor(model => model.obj.type, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Loại chi tiết", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.obj.category_id, new SelectList(Enumerable.Empty<SelectListItem>(), "", ""), "Loại chi tiết", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.obj.category_id, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Số tiền", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.HiddenFor(model => model.amount)
                @Html.TextBox("msk_amount", "", new { @class = "form-control numberic", style = "background-color: antiquewhite;" })
                @*@Html.EditorFor(model => model.amount, new { htmlAttributes = new { @class = "form-control numberic", type = "number" } })*@
                @Html.ValidationMessageFor(model => model.amount, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Ghi chú", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.obj.note, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.obj.note, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Chấp nhận" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @if (ViewBag.contract_id != null)
    {
        @Html.ActionLink("Về danh sách", "Details", "Contracts", new { id = ViewBag.contract_id }, null)
    }
    else
    {
        @Html.ActionLink("Về danh sách", "Index")
    }
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            $(".datetime").datepicker({
                "autoclose": true,
                "todayHighlight": true,
                "dateFormat": "dd/mm/yyyy",
                "format": "dd/mm/yyyy",
            }).datepicker("setDate", new Date());
            $(":submit").click(function () {
                $("#amount").val($("#msk_amount").autoNumeric('get') || 0);
            });
        });
        function FillCategory() {
            var parent = $('#obj_contract_id').val();
            var cate = $('#obj_type').val();
            $.ajax({
                url: '/Categories/FillCategory',
                type: "GET",
                dataType: "JSON",
                data: { cate: cate, p: parent },
                success: function (categories) {
                    $("#obj_category_id").html(""); // clear before appending new list
                    $.each(categories, function (i, cate) {
                        $("#obj_category_id").append(
                            $('<option></option>').val(cate.id).html(cate.name));
                    });
                }
            });
        }
        $(function () {
            $.validator.methods.date = function (value, element) {
                return this.optional(element) || moment(value, "DD/MM/YYYY", true).isValid();
            }
        });
    </script>
}
